import pandas as pd
import matplotlib.pyplot as plt
import os
import numpy as np

# Function to process CSV files and extract initializer data
def process_csv(file_path):
    df = pd.read_csv(file_path)
    return df

# Function to plot the median validation accuracy for each initializer
def plot_median_accuracy(directory):
    initializers_data = {}

    # Define a color map for different initializers
    colormap = plt.cm.get_cmap('tab10')

    # Read and process each CSV file in the directory
    for i, file in enumerate(os.listdir(directory)):
        if file.endswith('.csv'):
            file_path = os.path.join(directory, file)
            df = process_csv(file_path)

            # Extract initializer from file name
            initializer = file.split('_')[-1].split('.')[0]

            # Calculate median validation accuracy
            median_accuracy = df['val_accuracy'].median()

            # Store median accuracy and its color for each initializer
            color = colormap(i % 10)
            initializers_data[initializer] = {'median_accuracy': median_accuracy, 'color': color}

    # Sort the initializers by name
    sorted_initializers = sorted(initializers_data.keys())

    # Plot the median validation accuracy for each initializer
    plt.figure(figsize=(12, 6))
    for i, initializer in enumerate(sorted_initializers):
        plt.scatter(initializer, initializers_data[initializer]['median_accuracy'], color=initializers_data[initializer]['color'], label=initializer)
        if i > 0:
            plt.plot([sorted_initializers[i - 1], initializer], [initializers_data[sorted_initializers[i - 1]]['median_accuracy'], initializers_data[initializer]['median_accuracy']], color='lightgray')

    plt.title('Median Validation Accuracy for Different Dropouts')
    plt.xlabel('Dropout Rate (%)')
    plt.ylabel('Median Validation Accuracy')
    plt.xticks(rotation=45, ha='right')
    plt.legend()
    plt.grid(True)
    plt.tight_layout()
    plt.show()

# Function to plot the median validation loss for each initializer
def plot_median_loss(directory):
    initializers_data = {}

    # Define a color map for different initializers
    colormap = plt.cm.get_cmap('tab10')

    # Read and process each CSV file in the directory
    for i, file in enumerate(os.listdir(directory)):
        if file.endswith('.csv'):
            file_path = os.path.join(directory, file)
            df = process_csv(file_path)

            # Extract initializer from file name
            initializer = file.split('_')[-1].split('.')[0]

            # Calculate median validation loss
            median_loss = df['val_loss'].median()

            # Store median loss and its color for each initializer
            color = colormap(i % 10)
            initializers_data[initializer] = {'median_loss': median_loss, 'color': color}

    # Sort the initializers by name
    sorted_initializers = sorted(initializers_data.keys())

    # Plot the median validation loss for each initializer
    plt.figure(figsize=(12, 6))
    for i, initializer in enumerate(sorted_initializers):
        plt.scatter(initializer, initializers_data[initializer]['median_loss'], color=initializers_data[initializer]['color'], label=initializer)
        if i > 0:
            plt.plot([sorted_initializers[i - 1], initializer], [initializers_data[sorted_initializers[i - 1]]['median_loss'], initializers_data[initializer]['median_loss']], color='lightgray')

    plt.title('Median Validation Loss for Different Dropouts')
    plt.xlabel('Dropout Rate (%)')
    plt.ylabel('Median Validation Loss')
    plt.xticks(rotation=45, ha='right')
    plt.legend()
    plt.grid(True)
    plt.tight_layout()
    plt.show()

# Provide the directory containing CSV files
directory = './fazer_graficos'

# Plot the median validation accuracy and loss for each initializer
plot_median_accuracy(directory)
plot_median_loss(directory)
