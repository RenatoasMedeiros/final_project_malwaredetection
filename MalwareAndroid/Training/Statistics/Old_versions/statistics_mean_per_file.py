# import pandas as pd

# # Load the CSV file
# csv_file = 'resnet50_crossval_history_model_not_pretrained_lecun_uniform.csv'  # Replace with the path to your CSV file
# data = pd.read_csv(csv_file)

# # List of parameters to calculate the average for
# parameters = ['train_accuracy', 'train_loss', 'val_accuracy', 'val_loss', 'epoch_time', 'val_precision', 'val_recall', 'val_f1']

# # Calculate the average for each parameter
# averages = data[parameters].mean()

# # Print the results
# print(csv_file)
# for param in parameters:
#     print(f"Average {param}: {averages[param]:.6f}")


import pandas as pd

def time_to_reach_accuracy(csv_file, target_accuracy=0.93):
    # Load the CSV file
    data = pd.read_csv(csv_file)
    
    # List of parameters to calculate the average for
    parameters = ['train_accuracy', 'train_loss', 'val_accuracy', 'val_loss', 'epoch_time', 'val_precision', 'val_recall', 'val_f1']
    
    # Calculate the average for each parameter
    averages = data[parameters].mean()
    
    # Calculate the cumulative time to reach the target accuracy
    cumulative_time = 0
    for index, row in data.iterrows():
        cumulative_time += row['epoch_time']
        if row['val_accuracy'] >= target_accuracy:
            break
    
    return cumulative_time, averages

# List of CSV files
csv_files = [
    'resnet50_crossval_history_model_not_pretrained_glorot_normal.csv',
    'resnet50_crossval_history_model_not_pretrained_glorot_uniform.csv',
    'resnet50_crossval_history_model_not_pretrained_lecun_normal.csv',
    'resnet50_crossval_history_model_not_pretrained_lecun_uniform.csv',
]

# Calculate and store results for each CSV file
results = []
for file in csv_files:
    cumulative_time, averages = time_to_reach_accuracy(file)
    results.append({
        'Initialization Method': file,
        'Val Accuracy': averages['val_accuracy'],
        'Val Loss': averages['val_loss'],
        'Epoch Time': averages['epoch_time'],
        'Val Precision': averages['val_precision'],
        'Val Recall': averages['val_recall'],
        'Val F1': averages['val_f1'],
        'Time to Reach 91.5%': cumulative_time
    })

# Create a DataFrame for the results and print it
results_df = pd.DataFrame(results)
print(results_df[['Initialization Method', 'Val Accuracy', 'Val Loss', 'Epoch Time', 'Val Precision', 'Val Recall', 'Val F1', 'Time to Reach 91.5%']])