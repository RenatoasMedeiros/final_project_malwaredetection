import pandas as pd
import matplotlib.pyplot as plt
import os
import numpy as np

# Function to find the best fold based on minimum validation loss for each file
def find_best_fold(directory):
    best_folds = {}
    
    csv_directory = os.path.join(directory, 'CSV')
    
    for file in os.listdir(csv_directory):
        if file.endswith('.csv'):
            file_path = os.path.join(csv_directory, file)
            df = pd.read_csv(file_path)
            min_loss_fold = df.loc[df['val_loss'].idxmin()]
            best_folds[file] = min_loss_fold['fold']
    
    return best_folds

nome = "Flatten Crossval Hyperbolic Tangent"
# Function to plot the evolution of validation accuracy for the best fold per file
def plot_accuracy_evolution_best_fold(directory, best_folds, custom_labels=None, Nome=nome):
    colors = ['b', 'g', 'r', 'c', 'm', 'y', 'k']  # List of colors for each file
    
    plt.figure(figsize=(10, 6))
    
    csv_directory = os.path.join(directory, 'CSV')
    last_epoch_accuracies = []  # List to store the accuracies from the last epoch
    
    for idx, (file, best_fold) in enumerate(best_folds.items()):
        file_path = os.path.join(csv_directory, file)
        df = pd.read_csv(file_path)
        fold_data = df[df['fold'] == best_fold]
        epochs = fold_data['epoch']
        val_accuracy = fold_data['val_accuracy']
        color = colors[idx % len(colors)]
        label = custom_labels[idx] if custom_labels else f'{file} - Fold {best_fold} - Validation Accuracy'
        plt.plot(epochs, val_accuracy, label=label, color=color)
        
        # Get the accuracy from the last epoch
        last_epoch_accuracy = val_accuracy.iloc[-1]
        last_epoch_accuracies.append(last_epoch_accuracy)
    
    # Calculate Max Median and Min Median
    max_median = np.max(last_epoch_accuracies)
    min_median = np.min(last_epoch_accuracies)
    
    # Print Max Median and Min Median
    print("Max Median:", max_median)
    print("Min Median:", min_median)
    
    plt.title('Validation Accuracy ' + Nome)
    plt.xlabel('Epoch')
    plt.ylabel('Validation Accuracy')
    plt.legend()
    plt.grid(True)
    plt.tight_layout()
    plt.show()

def plot_loss_evolution_best_fold(directory, best_folds, custom_labels=None, Nome=nome):
    colors = ['b', 'g', 'r', 'c', 'm', 'y', 'k']  # List of colors for each file
    
    plt.figure(figsize=(10, 6))
    
    csv_directory = os.path.join(directory, 'CSV')
    last_epoch_losses = []  # List to store the losses from the last epoch
    
    for idx, (file, best_fold) in enumerate(best_folds.items()):
        file_path = os.path.join(csv_directory, file)
        df = pd.read_csv(file_path)
        fold_data = df[df['fold'] == best_fold]
        epochs = fold_data['epoch']
        val_loss = fold_data['val_loss']
        color = colors[idx % len(colors)]
        label = custom_labels[idx] if custom_labels else f'{file} - Fold {best_fold} - Validation Loss'
        plt.plot(epochs, val_loss, label=label, color=color)
        
        # Get the loss from the last epoch
        last_epoch_loss = val_loss.iloc[-1]
        last_epoch_losses.append(last_epoch_loss)
    
    # Calculate Max Median and Min Median
    max_median = np.max(last_epoch_losses)
    min_median = np.min(last_epoch_losses)
    
    # Print Max Median and Min Median
    print("Max Median:", max_median)
    print("Min Median:", min_median)
    
    plt.title('Validation Loss ' + Nome)
    plt.xlabel('Epoch')
    plt.ylabel('Validation Loss')
    plt.legend()
    plt.grid(True)
    plt.tight_layout()
    plt.show()

# Provide the directory containing your project
project_directory = './Training/Flatten_CrossVal_All_Done/Hyperbolic Tangent'

nome = "Flatten Crossval Hyperbolic Tangent"
# Find the best fold per file
best_folds = find_best_fold(project_directory)

# Define custom labels (optional)
custom_labels = ['Dense 1 - 800 Dense 2 - 250', 'Dense 1 - 800', 'Dense 1 - 1350', 'Dense 2 - 250']

# Plot the evolution of validation accuracy for the best fold per file
plot_accuracy_evolution_best_fold(project_directory, best_folds, custom_labels, nome)

# Plot the evolution of validation loss for the best fold per file
plot_loss_evolution_best_fold(project_directory, best_folds, custom_labels, nome)