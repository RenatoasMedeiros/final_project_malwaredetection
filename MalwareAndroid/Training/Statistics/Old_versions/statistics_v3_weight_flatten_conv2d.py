import pandas as pd
import matplotlib.pyplot as plt

# Read the CSV file into a DataFrame
df = pd.read_csv("flatten_crossval_relu_model_history_dense1_1350_weights.csv")

# Calculate the median validation accuracy and validation loss for each weight initializer
median_metrics = df.groupby(['initializer'])[['val_accuracy', 'val_loss']].median().reset_index()




# Plot the validation accuracy with lines connecting each dot
plt.figure(figsize=(10, 6))
for i, row in median_metrics.iterrows():
    plt.plot(row['initializer'], row['val_accuracy'], marker='o', label=row['initializer'], color='C'+str(i))
    # Connect dots with light gray lines
    if i > 0:
        plt.plot([prev_initializer, row['initializer']], [prev_val_accuracy, row['val_accuracy']], linestyle='-', color='lightgray')
    prev_initializer = row['initializer']
    prev_val_accuracy = row['val_accuracy']
plt.xlabel('Weight Initializer')
plt.ylabel('Median Validation Accuracy')
plt.title('Median Validation Accuracy for Different Weight Initializers')
plt.legend()
plt.grid(True)
plt.show()

# Plot the validation loss with lines connecting each dot
plt.figure(figsize=(10, 6))
for i, row in median_metrics.iterrows():
    plt.plot(row['initializer'], row['val_loss'], marker='o', label=row['initializer'], color='C'+str(i))
    # Connect dots with light gray lines
    if i > 0:
        plt.plot([prev_initializer, row['initializer']], [prev_val_loss, row['val_loss']], linestyle='-', color='lightgray')
    prev_initializer = row['initializer']
    prev_val_loss = row['val_loss']
plt.xlabel('Weight Initializer')
plt.ylabel('Median Validation Loss')
plt.title('Median Validation Loss for Different Weight Initializers')
plt.legend()
plt.grid(True)
plt.show()

# Plot the validation accuracy
plt.figure(figsize=(10, 6))
for i, row in median_metrics.iterrows():
    plt.plot(row['initializer'], row['val_accuracy'], marker='o', label=row['initializer'])
plt.xlabel('Weight Initializer')
plt.ylabel('Median Validation Accuracy')
plt.title('Median Validation Accuracy for Different Weight Initializers')
plt.legend()
plt.grid(True)
plt.show()

# Plot the validation loss
plt.figure(figsize=(10, 6))
for i, row in median_metrics.iterrows():
    plt.plot(row['initializer'], row['val_loss'], marker='o', label=row['initializer'])
plt.xlabel('Weight Initializer')
plt.ylabel('Median Validation Loss')
plt.title('Median Validation Loss for Different Weight Initializers')
plt.legend()
plt.grid(True)
plt.show()

# Find the best weight initializer based on median validation accuracy
best_initializer_accuracy = median_metrics.loc[median_metrics['val_accuracy'].idxmax()]['initializer']
print(f'Best Weight Initializer based on Median Validation Accuracy: {best_initializer_accuracy}')

# Find the best weight initializer based on median validation loss
best_initializer_loss = median_metrics.loc[median_metrics['val_loss'].idxmin()]['initializer']
print(f'Best Weight Initializer based on Median Validation Loss: {best_initializer_loss}')


# Plot the validation accuracy as line graphs
plt.figure(figsize=(10, 6))
for i, row in median_metrics.iterrows():
    plt.plot(row['initializer'], row['val_accuracy'], marker='o', label=row['initializer'])
plt.xlabel('Weight Initializer')
plt.ylabel('Median Validation Accuracy')
plt.title('Median Validation Accuracy for Different Weight Initializers')
plt.legend()
plt.grid(True)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Plot the validation loss as line graphs
plt.figure(figsize=(10, 6))
for i, row in median_metrics.iterrows():
    plt.plot(row['initializer'], row['val_loss'], marker='o', label=row['initializer'])
plt.xlabel('Weight Initializer')
plt.ylabel('Median Validation Loss')
plt.title('Median Validation Loss for Different Weight Initializers')
plt.legend()
plt.grid(True)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()


# Plot median validation accuracy
median_metrics.plot(x='initializer', y='val_accuracy', marker='o', figsize=(10, 6))
plt.xlabel('Weight Initializer')
plt.ylabel('Median Validation Accuracy')
plt.title('Median Validation Accuracy for Different Weight Initializers')
plt.xticks(rotation=45)
plt.grid(True)
plt.tight_layout()
plt.show()

# Plot median validation loss
median_metrics.plot(x='initializer', y='val_loss', marker='o', figsize=(10, 6))
plt.xlabel('Weight Initializer')
plt.ylabel('Median Validation Loss')
plt.title('Median Validation Loss for Different Weight Initializers')
plt.xticks(rotation=45)
plt.grid(True)
plt.tight_layout()
plt.show()
