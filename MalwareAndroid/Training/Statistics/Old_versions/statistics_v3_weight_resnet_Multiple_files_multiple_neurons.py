import pandas as pd
import matplotlib.pyplot as plt
import os

# Function to process CSV files and extract initializer data
def process_csv(file_path):
    df = pd.read_csv(file_path)
    return df

# Function to extract the number of neurons from file name
def extract_neurons(file_name):
    # Splitting file name by underscores
    parts = file_name.split('_')
    # Finding the part containing neurons count
    for i, part in enumerate(parts):
        if part.startswith('metodosecreto'):
            if i + 1 < len(parts):  # Ensure there's a part after 'metodosecreto'
                neurons_part = parts[i + 1]  # The part after 'metodosecreto'
                try:
                    return int(neurons_part)
                except ValueError:
                    return None
    return None

# Function to plot the median validation accuracy for each initializer
def plot_median_accuracy(directory):
    initializers_data = {}

    # Define a color map for different initializers
    colormap = plt.cm.get_cmap('tab10')

    # Read and process each CSV file in the directory
    for i, file in enumerate(os.listdir(directory)):
        if file.endswith('.csv'):
            file_path = os.path.join(directory, file)
            df = process_csv(file_path)

            # Extract number of neurons from file name
            neurons = extract_neurons(file)

            # Calculate median validation accuracy
            median_accuracy = df['val_accuracy'].median()

            # Store median accuracy and its color for each initializer
            color = colormap(i % 10)
            initializers_data[file] = {'neurons': neurons, 'median_accuracy': median_accuracy, 'color': color}

    # Plot the median validation accuracy for each initializer
    plt.figure(figsize=(12, 6))
    for file, data in initializers_data.items():
        plt.scatter(data['neurons'], data['median_accuracy'], color=data['color'], label=f'Neurons: {data["neurons"]}')
    plt.title('Median Validation Accuracy for Different Number of Neurons')
    plt.xlabel('Number of Neurons')
    plt.ylabel('Median Validation Accuracy')
    plt.xticks(rotation=45, ha='right')
    plt.legend()
    plt.grid(True)
    plt.tight_layout()
    plt.show()

# Function to plot the median validation loss for each initializer
def plot_median_loss(directory):
    initializers_data = {}

    # Define a color map for different initializers
    colormap = plt.cm.get_cmap('tab10')

    # Read and process each CSV file in the directory
    for i, file in enumerate(os.listdir(directory)):
        if file.endswith('.csv'):
            file_path = os.path.join(directory, file)
            df = process_csv(file_path)

            # Extract number of neurons from file name
            neurons = extract_neurons(file)

            # Calculate median validation loss
            median_loss = df['val_loss'].median()

            # Store median loss and its color for each initializer
            color = colormap(i % 10)
            initializers_data[file] = {'neurons': neurons, 'median_loss': median_loss, 'color': color}

    # Plot the median validation loss for each initializer
    plt.figure(figsize=(12, 6))
    for file, data in initializers_data.items():
        plt.scatter(data['neurons'], data['median_loss'], color=data['color'], label=f'Neurons: {data["neurons"]}')
    plt.title('Median Validation Loss for Different Number of Neurons')
    plt.xlabel('Number of Neurons')
    plt.ylabel('Median Validation Loss')
    plt.xticks(rotation=45, ha='right')
    plt.legend()
    plt.grid(True)
    plt.tight_layout()
    plt.show()


# Function to plot the evolution of validation accuracy for each file
def plot_median_evolution_accuracy(directory):
    # Define a color map for different files
    colormap = plt.cm.get_cmap('tab10')

    # Store data for median evolution of each file
    median_evolution_data = []

    # Read and process each CSV file in the directory
    for i, file in enumerate(os.listdir(directory)):
        if file.endswith('.csv'):
            file_path = os.path.join(directory, file)
            df = process_csv(file_path)

            # Extract number of neurons from file name
            neurons = extract_neurons(file)

            # Calculate median evolution of validation accuracy for each epoch
            median_evolution = df.groupby('epoch')['val_accuracy'].median()

            # Store data for median evolution of each file
            median_evolution_data.append({'neurons': neurons, 'median_evolution': median_evolution})

    # Plot the median evolution of validation accuracy for each file
    plt.figure(figsize=(12, 6))
    for i, data in enumerate(median_evolution_data):
        neurons = data['neurons']
        median_evolution = data['median_evolution']
        color = colormap(i % 10)
        plt.plot(median_evolution.index, median_evolution.values, label=f'Neurons: {neurons}', color=color)

    plt.title('Median Evolution of Validation Accuracy')
    plt.xlabel('Epoch')
    plt.ylabel('Median Validation Accuracy')
    plt.legend()
    plt.grid(True)
    plt.tight_layout()
    plt.show()

# Function to plot the evolution of validation loss for each file
def plot_median_evolution_loss(directory):
    # Define a color map for different files
    colormap = plt.cm.get_cmap('tab10')

    # Store data for median evolution of each file
    median_evolution_data = []

    # Read and process each CSV file in the directory
    for i, file in enumerate(os.listdir(directory)):
        if file.endswith('.csv'):
            file_path = os.path.join(directory, file)
            df = process_csv(file_path)

            # Extract number of neurons from file name
            neurons = extract_neurons(file)

            # Calculate median evolution of validation loss for each epoch
            median_evolution = df.groupby('epoch')['val_loss'].median()

            # Store data for median evolution of each file
            median_evolution_data.append({'neurons': neurons, 'median_evolution': median_evolution})

    # Plot the median evolution of validation loss for each file
    plt.figure(figsize=(12, 6))
    for i, data in enumerate(median_evolution_data):
        neurons = data['neurons']
        median_evolution = data['median_evolution']
        color = colormap(i % 10)
        plt.plot(median_evolution.index, median_evolution.values, label=f'Neurons: {neurons}', color=color)

    plt.title('Median Evolution of Validation Loss')
    plt.xlabel('Epoch')
    plt.ylabel('Median Validation Loss')
    plt.legend()
    plt.grid(True)
    plt.tight_layout()
    plt.show()

# Provide the directory containing CSV files
directory = './Training/fazer_graficos'

# Plot the median validation accuracy and loss for each initializer
plot_median_accuracy(directory)
plot_median_loss(directory)
# Plot the median evolution of validation accuracy for each file
plot_median_evolution_accuracy(directory)

# Plot the median evolution of validation loss for each file
plot_median_evolution_loss(directory)