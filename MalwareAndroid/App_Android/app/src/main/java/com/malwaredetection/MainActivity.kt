package com.malwaredetection

import android.app.AlertDialog
import android.content.Intent
import android.content.IntentFilter
import android.content.pm.PackageManager
import android.net.Uri
import android.os.Bundle
import android.widget.ListView
import android.widget.TextView
import android.widget.Toast
import androidx.activity.ComponentActivity
import okhttp3.Call
import okhttp3.Callback
import okhttp3.MediaType.Companion.toMediaTypeOrNull
import okhttp3.MultipartBody
import okhttp3.OkHttpClient
import okhttp3.Request
import okhttp3.RequestBody.Companion.asRequestBody
import okhttp3.Response
import org.json.JSONException
import org.json.JSONObject
import java.io.File
import java.io.IOException
import java.util.concurrent.TimeUnit

class MainActivity : ComponentActivity() {

    private lateinit var uninstallReceiver: UninstallReceiver
    private lateinit var listView: ListView
    private lateinit var appAdapter: AppAdapter
    private lateinit var textView : TextView
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        listView = findViewById(R.id.listView)
        textView = findViewById(R.id.textView)


        refreshAppList()

        uninstallReceiver = UninstallReceiver {
            runOnUiThread {
                refreshAppList()
            }
        }

        val intentFilter = IntentFilter(Intent.ACTION_PACKAGE_REMOVED).apply {
            addDataScheme("package")
        }

        registerReceiver(uninstallReceiver, intentFilter)
    }

    override fun onDestroy() {
        super.onDestroy()
        unregisterReceiver(uninstallReceiver)
    }

    private fun refreshAppList() {
        val appsList = getInstalledApps()
        appAdapter = AppAdapter(this, appsList) { appInfo ->
            showModelSelectionDialog(appInfo.packageName)
        }
        listView.adapter = appAdapter
        Toast.makeText(this, "App list refreshed", Toast.LENGTH_SHORT).show()
    }

    private fun getInstalledApps(): List<AppInfo> {
        val pm: PackageManager = packageManager
        val apps = pm.getInstalledApplications(PackageManager.GET_META_DATA)
        val appsList = mutableListOf<AppInfo>()

        val intent = Intent(Intent.ACTION_MAIN, null)
        intent.addCategory(Intent.CATEGORY_LAUNCHER)
        val launchableApps = pm.queryIntentActivities(intent, 0)

        val launchablePackages = launchableApps.map { it.activityInfo.packageName }.toSet()

        for (app in apps) {
            if (launchablePackages.contains(app.packageName)) {
                val name = pm.getApplicationLabel(app).toString()
                val packageName = app.packageName
                val icon = pm.getApplicationIcon(app)
                appsList.add(AppInfo(name, packageName, icon))
            }
        }

        return appsList
    }

    private fun extractApk(packageName: String, model: String) {
        val builder = AlertDialog.Builder(this)
        builder.setView(R.layout.progress_layout)
        val progressDialog = builder.create()
        progressDialog.show()

        try {
            val pm: PackageManager = packageManager
            val appInfo = pm.getApplicationInfo(packageName, 0)
            val apkPath = appInfo.sourceDir
            val apkFile = File(apkPath)

            val apkMediaType = "application/octet-stream".toMediaTypeOrNull()
            val requestFile = apkFile.asRequestBody(apkMediaType)

            val requestBody = MultipartBody.Builder()
                .setType(MultipartBody.FORM)
                .addFormDataPart("apk", "$packageName.apk", requestFile)
                .addFormDataPart("model", model)
                .build()

            val request = Request.Builder()
                .url("https://fitting-separately-ewe.ngrok-free.app/upload")
                .post(requestBody)
                .build()

            val client = OkHttpClient.Builder()
                .connectTimeout(120, TimeUnit.SECONDS)
                .writeTimeout(120, TimeUnit.SECONDS)
                .readTimeout(120, TimeUnit.SECONDS)
                .build()

            client.newCall(request).enqueue(object : Callback {
                override fun onResponse(call: Call, response: Response) {
                    progressDialog.dismiss()

                    if (response.isSuccessful) {

                        val responseBodyJson = JSONObject(response.body?.string()!!)

                        runOnUiThread {
                            Toast.makeText(this@MainActivity, "APK sent for analysis", Toast.LENGTH_LONG).show()
                            showAlertDialogResponse(responseBodyJson,packageName)
                        }
                        println("Response: $responseBodyJson")
                    } else {

                        runOnUiThread {
                            Toast.makeText(this@MainActivity, "Failed to send APK: ${response.code}", Toast.LENGTH_SHORT).show()
                        }
                        println("Unsuccessful response: ${response.code}")
                    }
                }
                
                override fun onFailure(call: Call, e: IOException) {

                    runOnUiThread {
                        Toast.makeText(this@MainActivity, "Request failed: ${e.message}", Toast.LENGTH_SHORT).show()
                    }
                    e.printStackTrace()
                    println("Request failed: ${e.message}")
                }
            })

        } catch (e: PackageManager.NameNotFoundException) {
            e.printStackTrace()
            Toast.makeText(this, "App not found", Toast.LENGTH_SHORT).show()
        } catch (e: Exception) {
            e.printStackTrace()
            Toast.makeText(this, "Failed to send APK", Toast.LENGTH_SHORT).show()
        }
    }

    private fun fetchModels(callback: (List<String>) -> Unit) {
        val client = OkHttpClient()
        val request = Request.Builder()
            .url("https://fitting-separately-ewe.ngrok-free.app/models")
            .build()

        client.newCall(request).enqueue(object : Callback {
            override fun onResponse(call: Call, response: Response) {
                if (response.isSuccessful) {
                    val responseBody = response.body?.string()
                    val models = parseModels(responseBody)
                    runOnUiThread {
                        callback(models)
                    }
                } else {
                    onFailure(call, IOException("Unexpected response code ${response.code}"))
                }
            }

            override fun onFailure(call: Call, e: IOException) {
                e.printStackTrace()
                runOnUiThread {
                    Toast.makeText(this@MainActivity, "Failed to fetch models: ${e.message}", Toast.LENGTH_SHORT).show()
                }
            }
        })
    }

    private fun parseModels(responseBody: String?): List<String> {
        val models = mutableListOf<String>()
        responseBody?.let {
            try {
                val jsonObject = JSONObject(it)
                val jsonArray = jsonObject.getJSONArray("models")
                for (i in 0 until jsonArray.length()) {
                    models.add(jsonArray.getString(i))
                }
            } catch (e: JSONException) {
                e.printStackTrace()
                runOnUiThread {
                    Toast.makeText(this@MainActivity, "Failed to parse models", Toast.LENGTH_SHORT).show()
                }
            }
        }
        return models
    }

    private fun showModelSelectionDialog(packageName: String) {
        fetchModels { models ->
            runOnUiThread {
                val builder = AlertDialog.Builder(this)
                builder.setTitle("Select a Model")
                builder.setItems(models.toTypedArray()) { _, which ->
                    val selectedModel = models[which]
                    extractApk(packageName, selectedModel)
                }
                builder.setCancelable(true)
                builder.create().show()
            }
        }
    }

    private fun showAlertDialogResponse(responseBody : JSONObject,packageName: String) {
        try {

            val receivedMessage = responseBody.getString("message")
            val model = responseBody.getString("model")
            val classification = responseBody.getString("classification")
            val resultMessage = "$receivedMessage \nUsing the model: $model\nClassified as: $classification"
            when(classification){
                "Malware"-> {
                    val alertDialog = AlertDialog.Builder(this)
                    alertDialog.apply {
                        setMessage(resultMessage)
                        setTitle("Result")
                        setCancelable(true)
                        setNegativeButton("Uninstall") { dialog, _ ->
                            val intent = Intent(Intent.ACTION_DELETE).apply {
                                data = Uri.parse("package:$packageName")
                            }
                            startActivity(intent)
                            dialog.dismiss()
                        }
                        setPositiveButton("OK") { dialog, _ ->
                            dialog.dismiss()
                        }
                        create().show()
                    }
                    getInstalledApps()
                }
                "Benign"-> {
                    val alertDialog = AlertDialog.Builder(this)
                    alertDialog.apply {
                        setMessage(resultMessage)
                        setTitle("Result")
                        setCancelable(true)
                        setPositiveButton("OK") { dialog, _ ->
                            // OK button clicked
                            dialog.dismiss()
                        }
                        create().show()
                    }
                }
            }

        } catch (e: JSONException) {
            e.printStackTrace()
            Toast.makeText(this, "Failed to parse response", Toast.LENGTH_SHORT).show()
        }
    }

}
